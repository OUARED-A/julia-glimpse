---
title: A glimpse into `Julia`
subtitle: camilogarciabotero.github.io/julia-intro
author:
  - name: Camilo Garc√≠a-Botero
    orcid: 0000-0002-0426-7007
    email: ca.garcia2@uniandes.edu.co
format: 
  revealjs:
    footer: |
      A glimpse into The Julia Language
    standalone: true
    preview-links: auto
    center: true
    slide-number: true
    fig-align: center
    code-line-numbers: false
    overview: true
    code-link: true
    smaller: false
    highlight-style: ayu
    theme: fonts.scss
    code-annotations: select
---

# The Julia Manifest

## 
-   Free and open source

# Juliaup

## The Julia version manager

You can get [`Juliaup`](https://github.com/JuliaLang/juliaup) and [Julia](https://julialang.org/) on Linux or MacOS with:

``` bash
curl -fsSL https://install.julialang.org | sh
```

. . .

Or if you are using Windows, simply:

``` bash
winget install julia -s msstore
```

***

Now just type `julia` on the terminal:

. . .

![](figs/julia-init.png){fig-align="center"}


# The marvelous REPL

## The REPL modes

An integrated package manager `Pkg.jl`
``` julia
julia> ] 
```
. . .

And direct access to `bash`
``` julia
julia> ;
```
. . .

The **help** mode right after hitting `?`
``` julia
julia> ?
```

***

```{.julia}
help?> map
```
. . . 

```{.julia}
help?> map
search: map map! mapfoldr mapfoldl mapslices mapreduce asyncmap asyncmap! macroexpand @macroexpand @macroexpand1 @atomicswap

  map(f, c...) -> collection


  Transform collection c by applying f to each element. For multiple collection arguments, apply f elementwise, and stop when
  when any of them is exhausted.

  See also map!, foreach, mapreduce, mapslices, zip, Iterators.map.

  Examples
  ‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°‚â°

  julia> map(x -> x * 2, [1, 2, 3])
  3-element Vector{Int64}:
   2
   4
   6

  julia> map(+, [1, 2, 3], [10, 20, 30, 400, 5000])
  3-element Vector{Int64}:
   11
   22
   33
...
```

# Oh my Beautiful syntax

***

Unicode support and nice operators:


``` julia
neural_network(x, ùêï, ùê∞, œÜ, g) = ùê∞ ‚ãÖ map(ùêØ‚±º -> g(ùêØ‚±º ‚ãÖ œÜ(x)), ùêï) # <1>
```
1. From the [Beautiful Algorithms](https://github.com/mossr/BeautifulAlgorithms.jl/blob/master/src/neural_network_one_liner.jl) project

# Managing Projects
the Manifest.toml and the Project.toml

# The Multiple Dispatch
a comparison with python 
a julia function
a more elaborated julia function with types
a different method using other types


# A Feature Rich Language

## Some Random feaures

Ternary operators:

if-elseif-else syntax,

```{.julia}
a ? b : c
```

## Macros (metaprogrmming: code that transforms code)

```{.julia}
@time
```

```{.julia}
@show
```

```{.julia}
@which
```


## Fine-grain debugging
return Julia's intermediate representation (IR) of the function's content

```{.julia}
@code_lowered
```
reports Julia's type inference on the IR

```{.julia}
@code_typed 
```

@code_llvm 
optimize=false shows the LLVM IR generated by Julia, shows the optimised LLVM

@code_native
shows the native assembly of the function

## Out-of-the-box parallelism
@simd
@thread

# A Rich Ecosystem

##

![](figs/julia-packages-ci.png)

## Differential Equations

## Data Science

DataFrames and Tidier.jl

## Plotting libraries

## Biology

# And many others...

GPU
QuantumComputing
ML
AD
Genie (web apps)
Pluto notebooks

# Some developer's tools

## Vscode plugin

## Creating a package

## Documentation
docstrings

## Testing

# A Supportive Community

## A short story...



## Other talks

https://github.com/johnfgibson/whyjulia

https://viralinstruction.com/posts/goodjulia/#its_both_fast_and_dynamic
